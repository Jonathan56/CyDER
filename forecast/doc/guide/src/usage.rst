
.. highlight:: rest

.. _usage:

Usage of the Forecasting Module
===============================

Before embarking on this section please make sure you've followed the instructions
at :doc:`build`.

At a high level, the forecasting module allows the user to do two things:

1. Train a neural network model
2. Run predictions on unseen data using the model trained

In this section, we will go over the options available to the user for each of these modes.
In general, many of the operations allowed by the module require a data file, please see
:doc:`help` for information about the data file format.

A summary of these options can be found by executing the following command:

.. code-block:: bash

  ./forecast-main --help

:: 

  Usage: Forecast [OPTIONS]...

    -h, --help                    Print help and exit
    -V, --version                 Print version and exit

  Training:
    Train the neural network with a given dataset.
        --training-file=Data File File to get training data from.
        --validation-file=Validation Data File
                                  File to use as validations set.
        --test-file=Test Data File
                                  File to use as training set.
        --num-tapped-delay-lines=INT
                                  Number of tapped delay lines to use for both
                                    input and output  (default=`1')
        --initial-weight-range=FLOAT
                                  Range to randomize initial weights on. It will
                                    randomize from [-value,value].
                                    (default=`0.1')
        --initial-learning-rate=FLOAT
                                  Initial value for the learning rate.
                                    (default=`0.01')
        --initial-momentum=FLOAT  Initial value for the learning momentum.
                                    (default=`0.01')
        --hidden-layers=INT       Size of each hidden layer separated by commas
        --max-epochs=INT          Number of epochs to use while training.
                                    (default=`10')
        --error-function=STRING   Function to use when calculating error.
                                    Currently only MSE and RMSE are available
                                    (default=`MSE')
        --desired-error=FLOAT     Desired error to achieve during training.
                                    (default=`0.01')
        --learning-rate-adaptation=STRING
                                  Desired learning rate adaptation technique.
                                    Currently available: LINEAR, CURRENT.
                                    (default=`LINEAR')
        --random-search=INT       Whether we should train the network using
                                    random hyperparameter search or not.
                                    (default=`0')

  Prediction:
    Use the a neural network specified by a .net file to predict a time series.
    If a test file is provided, we will run evaluations.
        --narx-file=narx.net file File to load narx specific parameters from.
        --fann-file=.net file     File to load neural network from, this should
                                    be generated by FANN.
        --predict-file=Predict File
                                  File to used to feed inputs into for
                                    prediction.

Setting the Environment [Optional]
==================================
In order to log output to a file we need to set a few environment variables, this is
because our module needs to know where the files should be saved to and where the log
configurations are saved. To set these variables automatically execute the following commands:

.. code-block:: bash
  
    # Make sure you're at root
    cd forecast/
    source bin/setenv.sh

The setenv.sh script is a simple helper script that sets all the environment variables to
their default values. The log outputs will be saved inside the forecast/log folder by default.

Below is a table of the customizable environment variables:

+----------------------------+-------------------------------------------------------+
| Environment Variable       | Description                                           |
+============================+=======================================================+
| FORECAST_LOG_CONFIGURATION | Points to the ZLOG configuration file                 |
+----------------------------+-------------------------------------------------------+
| FORECAST_LOG_FILE          | Points to the file where the log output will be saved |
+----------------------------+-------------------------------------------------------+
| FORECAST_LOG_LEVEL         | Specifies the verbosity of our logs                   |
+----------------------------+-------------------------------------------------------+

The FORECAST_LOG_LEVEL can take the following values:

- DEBUG
- INFO
- NOTICE
- WARN
- ERROR
- FATAL
- NONE


Training a Neural Network
=========================

To train a neural network we minimally need a training data file.
A network can be trained right off the box using the following command:

.. code-block:: bash

  ./forecast_main --training-file=<FILE>

This command will train a neural network with default parameters, this tends to yield
poor results in general. Training a good neural network requires the tuning of many
hyper-parameters to achieve good convergence. The table below lists every hyper-parameter
and the corresponding command-line option that the user can use.

+--------------------------+----------------------------+---------------------+
| Hyper-Parameter          | Command Line Option        | Type                |
+==========================+============================+=====================+
| Initial Learning Rate    | --initial-learning-rate    | Float               |
+--------------------------+----------------------------+---------------------+
| Tapped Delay Lines       | --num-tapped-delay-lines   | Int                 |
+--------------------------+----------------------------+---------------------+
| Momentum                 | --initial-momentum         | Float               |
+--------------------------+----------------------------+---------------------+
| Hidden Layers            | --hidden-layers            | Comma Separated Int |
+--------------------------+----------------------------+---------------------+
| Number of Epochs         | --max-epochs               | Int                 |
+--------------------------+----------------------------+---------------------+
| Error Function           | --error-functions          | "RMSE" or "MSE"     |
+--------------------------+----------------------------+---------------------+
| Desired Error            | --desired-error            | Float               |
+--------------------------+----------------------------+---------------------+
| Learning Rate Adaptation | --learning-rate-adaptation | "LINEAR" or "BOLD"  |
+--------------------------+----------------------------+---------------------+

Another good option to use is --test-file. This option allows you to pass test data
on which to evaluate your model. Now we know how to modify hyper-parameters and we can
pass a training and testing data file. As an example, suppose we want to train a neural
network with two hidden layers of size 10, momentum 0.9, learning rate of 0.01 and 3
tapped delay lines. To do so, we would run the following command:

.. code-block:: bash
    
    ./forecast-main --training-file=TRAIN_FILE --test-file=TEST_FILE 
                    --hidden-layers=10,10 --initial-momentum=0.9 --initial-learning-rate=0.01
                    --num-tapped-delay-lines=3

The output to this command is two serialized neural network files called fann.net and narx.net.
When running predictions we will load our models from these files so make sure to keep them
around.

Running Predictions
-------------------

Running predictions is very similar to training a neural network, there are two inputs
needed: the serialized neural network and a prediction data file. Please look
at :doc:`help` to see the prediction file format as it differs slightly from the training and
testing data format.

Given these inputs, run the following command:

.. code-block:: bash

    ./forecast-main --narx-file=NARXNET --fann-file=FANNNET --predict-file=PREDICT_FILE

The output of the command is a CSV file with the prediction for each timestep. Nothing else
is required in order to run predictions.
