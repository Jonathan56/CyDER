.. highlight:: rest

.. _build:

Creating an FMU
===============

This chapter describes how to create a Functional Mockup Unit, starting from a CYMDIST model description input file.
It assumes you have followed the :doc:`installation` instructions, and that you have created the CYMDIST model description file  following the :doc:`bestPractice` guidelines.


Command-line use
^^^^^^^^^^^^^^^^

To create an FMU,
open a command-line window (see :doc:`notation`).
The standard invocation of the CYMDISTPy tool is:

.. code-block:: none

  > python  <scriptDir>CYMDISTWritter.py  \
    -g <path-to-grid-model-file>  \
    -i <path-to-input-file> -b <path-to-buildings-lib-file> \
    -m <path-to-modelica-template-file> \
    -s <path-to-modelica-script-template-file> -x <path-to-xsd-file> \
    -r <flag-to-write-results>

where ``scriptDir`` is the path to the scripts directory of CYMDISTPy.
This is the ``parser/`` subdirectory of the installation directory.
See :doc:`installation` for details.

If ``CYMDISTWritter.py`` is run from within ``scriptDir`` then only the required arguments are needed
as shown in the following example:

.. code-block:: none

  # Windows:
  > python  CYMDISTWritter.py  -g C:\grid\test.sxst  -i test.xml  -b modelica-buildings

where ``scriptDir`` is the path to the scripts directory of CYMDISTPy.
Typically this is the ``parser/`` subdirectory of the installation directory.
See :doc:`installation` for details.

All file paths can be absolute or relative.
For readability, the rest of these instructions omit the paths to the script and input files.

.. note:: If any file path contains spaces, then it must be surrounded with double quotes.

Script ``CYMDISTWritter.py`` supports the following command-line switches:

+----------------------------------------------------+----------------------------------------------------------+
| option <argument>                                  | Purpose                                                  |
+====================================================+==========================================================+
| -g <path-to-grid-model-file>                       | Path to the grid model (required).                       |
+----------------------------------------------------+----------------------------------------------------------+
| -i <path-to-input-file>                            | Path to the input file (required).                       |
+----------------------------------------------------+----------------------------------------------------------+
| -b <path-to-buildings-lib-file>                    | Path to the Buildings library (required).                |
+----------------------------------------------------+----------------------------------------------------------+
| -m <path-to-modelica-template-file>                | Path to the Modelica template file                       |
|                                                    | This file is in the ``scriptDir``. If the script is      |
|                                                    | run for the ``scriptDir`` then this file is not required.|
+----------------------------------------------------+----------------------------------------------------------+
| -s <path-to-modelica-script-template-file>         | Path to the Modelica script template file                |
|                                                    | This file is in the ``scriptDir``. If the script is      |
|                                                    | run for the ``scriptDir`` then this file is not required.|
+----------------------------------------------------+----------------------------------------------------------+
| -x <path-to-xsd-file>                              | Path to the ``XSD`` validator file.                      |
|                                                    | This file is in the ``scriptDir``. If the script is      |
|                                                    | run for the ``scriptDir`` then this file is not required.|
+----------------------------------------------------+----------------------------------------------------------+
|-r <flag-to-write-results>                          | Flag to write results.                                   |
|                                                    | 0 if results should not be written, 1 else. Default is 0.|
+----------------------------------------------------+----------------------------------------------------------+

The main functions of CYMDISTPy are

 - reading, validating, andparsing the CYMDIST XML input file,
 - writing Modelica code with input and outputs,
 - invoking Dymola to compile the Modelica code as an FMU for model exchange 2.0.

.. note:: 

  In the process of creating the FMU, CYMDISTPy will rewrite the model description file 
  generated by Dymola to include ``needsExecutionTool=true`` attribute in the FMU capabilities of the CYMDIST FMU. 
  This is currently not supported by default in Dymola.

Output
^^^^^^

The main output from running ``CYMDISTWritter.py`` consists of an FMU, named after the modelName specified in the input file.
The FMU is written to the current working directory, that is, in the directory from which you entered the command.

The FMU is complete and self-contained.
Any secondary output from running the CYMDISTPy tools can be deleted safely.

Note that the FMU is a zip file.
This means you can open and inspect its contents.
To do so, it may help to change the "``.fmu``" extension to "``.zip``".
