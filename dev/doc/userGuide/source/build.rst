.. highlight:: rest

.. _build:

Creating an FMU
===============

This chapter describes how to create a Functional Mockup Unit, starting from a CYMDIST model description input file.
It assumes you have followed the :doc:`installation` instructions, and that you have created the CYMDIST 
model description file  following the :doc:`bestPractice` guidelines.


Command-line use
^^^^^^^^^^^^^^^^

To create an FMU,
open a command-line window (see :doc:`notation`).
The standard invocation of the CYMDISTPy tool is:

.. code-block:: none

  > python  <scriptDir>CYMDISTWritter.py  \
    -g <grid-model-path>  \
    -i <input-file-path> \
    -r <write-results>

where ``scriptDir`` is the path to the scripts directory of CYMDISTPy.
This is the ``parser`` subdirectory of the installation directory.
See :doc:`installation` for details.

An example of invoking ``CYMDISTWritter.py`` on Windows is 

.. code-block:: none

  # Windows:
  > python  parser\CYMDISTWritter.py  -g  C:\test.sxst  -i  test.xml 

All file paths can be absolute or relative.
For readability, the rest of these instructions omit the paths to the script and input files.

.. note:: If any file path contains spaces, then it must be surrounded with double quotes.

Script ``CYMDISTWritter.py`` supports the following command-line switches:

+----------------------------------------------------+----------------------------------------------------------+
| option <argument>                                  | Purpose                                                  |
+====================================================+==========================================================+
| -g <grid-model-path>                               | Path to the grid model (required)                        |
+----------------------------------------------------+----------------------------------------------------------+
| -i <input-file-path>                               | Path to the input file (required)                        |
+----------------------------------------------------+----------------------------------------------------------+
| -r <write-results>                                 | Flag for writing results.                                |
|                                                    | 0 if results should not be written, 1 else. Default is 0 |
+----------------------------------------------------+----------------------------------------------------------+

The main functions of CYMDISTPy are

 - reading, validating, and parsing the CYMDIST XML input file. 
   This includes removing and replacing invalid characters in variable names such as ``*+-`` with ``_``,
 - writing Modelica code with valid inputs and outputs names,
 - invoking Dymola to compile the Modelica code as an FMU for model exchange 2.0.

.. note:: 

  In the process of creating the FMU, CYMDISTPy will rewrite the model description file 
  generated by Dymola to include ``needsExecutionTool=true`` attribute in the FMU capabilities of the CYMDIST FMU. 
  This is currently not supported by default in Dymola.

Output
^^^^^^

The main output from running ``CYMDISTWritter.py`` consists of an FMU, named after the ``modelName`` specified in the input file.
The FMU is written to the current working directory, that is, in the directory from which you entered the command.

The FMU is complete and self-contained.
Any secondary output from running the CYMDISTPy tools can be deleted safely.

Note that the FMU is a zip file.
This means you can open and inspect its contents.
To do so, it may help to change the "``.fmu``" extension to "``.zip``".
